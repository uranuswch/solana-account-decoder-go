// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	Data *InitializeData

	// [0] = [WRITE] state
	//
	// [1] = [] reservePda
	//
	// [2] = [WRITE] stakeList
	//
	// [3] = [WRITE] validatorList
	//
	// [4] = [] msolMint
	//
	// [5] = [] operationalSolAccount
	//
	// ····· liqPool: [6] = [] lpMint
	//
	// ·············· [7] = [] solLegPda
	//
	// ·············· [8] = [] msolLeg
	//
	// [9] = [] treasuryMsolAccount
	//
	// [10] = [] clock
	//
	// [11] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *Initialize) SetData(data InitializeData) *Initialize {
	inst.Data = &data
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *Initialize) SetStateAccount(state ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Initialize) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReservePdaAccount sets the "reservePda" account.
func (inst *Initialize) SetReservePdaAccount(reservePda ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(reservePda)
	return inst
}

// GetReservePdaAccount gets the "reservePda" account.
func (inst *Initialize) GetReservePdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakeListAccount sets the "stakeList" account.
func (inst *Initialize) SetStakeListAccount(stakeList ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(stakeList).WRITE()
	return inst
}

// GetStakeListAccount gets the "stakeList" account.
func (inst *Initialize) GetStakeListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetValidatorListAccount sets the "validatorList" account.
func (inst *Initialize) SetValidatorListAccount(validatorList ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(validatorList).WRITE()
	return inst
}

// GetValidatorListAccount gets the "validatorList" account.
func (inst *Initialize) GetValidatorListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMsolMintAccount sets the "msolMint" account.
func (inst *Initialize) SetMsolMintAccount(msolMint ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(msolMint)
	return inst
}

// GetMsolMintAccount gets the "msolMint" account.
func (inst *Initialize) GetMsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOperationalSolAccountAccount sets the "operationalSolAccount" account.
func (inst *Initialize) SetOperationalSolAccountAccount(operationalSolAccount ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(operationalSolAccount)
	return inst
}

// GetOperationalSolAccountAccount gets the "operationalSolAccount" account.
func (inst *Initialize) GetOperationalSolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

type InitializeLiqPoolAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewInitializeLiqPoolAccountsBuilder() *InitializeLiqPoolAccountsBuilder {
	return &InitializeLiqPoolAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
}

func (inst *Initialize) SetLiqPoolAccountsFromBuilder(initializeLiqPoolAccountsBuilder *InitializeLiqPoolAccountsBuilder) *Initialize {
	inst.AccountMetaSlice[6] = initializeLiqPoolAccountsBuilder.GetLpMintAccount()
	inst.AccountMetaSlice[7] = initializeLiqPoolAccountsBuilder.GetSolLegPdaAccount()
	inst.AccountMetaSlice[8] = initializeLiqPoolAccountsBuilder.GetMsolLegAccount()
	return inst
}

// SetLpMintAccount sets the "lpMint" account.
func (inst *InitializeLiqPoolAccountsBuilder) SetLpMintAccount(lpMint ag_solanago.PublicKey) *InitializeLiqPoolAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lpMint)
	return inst
}

// GetLpMintAccount gets the "lpMint" account.
func (inst *InitializeLiqPoolAccountsBuilder) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSolLegPdaAccount sets the "solLegPda" account.
func (inst *InitializeLiqPoolAccountsBuilder) SetSolLegPdaAccount(solLegPda ag_solanago.PublicKey) *InitializeLiqPoolAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(solLegPda)
	return inst
}

// GetSolLegPdaAccount gets the "solLegPda" account.
func (inst *InitializeLiqPoolAccountsBuilder) GetSolLegPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMsolLegAccount sets the "msolLeg" account.
func (inst *InitializeLiqPoolAccountsBuilder) SetMsolLegAccount(msolLeg ag_solanago.PublicKey) *InitializeLiqPoolAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(msolLeg)
	return inst
}

// GetMsolLegAccount gets the "msolLeg" account.
func (inst *InitializeLiqPoolAccountsBuilder) GetMsolLegAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTreasuryMsolAccountAccount sets the "treasuryMsolAccount" account.
func (inst *Initialize) SetTreasuryMsolAccountAccount(treasuryMsolAccount ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(treasuryMsolAccount)
	return inst
}

// GetTreasuryMsolAccountAccount gets the "treasuryMsolAccount" account.
func (inst *Initialize) GetTreasuryMsolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetClockAccount sets the "clock" account.
func (inst *Initialize) SetClockAccount(clock ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *Initialize) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *Initialize) SetRentAccount(rent ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *Initialize) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ReservePda is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StakeList is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ValidatorList is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MsolMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.OperationalSolAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.LiqPoolLpMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.LiqPoolSolLegPda is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.LiqPoolMsolLeg is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TreasuryMsolAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       reservePda", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        stakeList", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    validatorList", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         msolMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   operationalSol", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   liqPool/lpMint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("liqPool/solLegPda", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  liqPool/msolLeg", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     treasuryMsol", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            clock", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("             rent", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	data InitializeData,
	// Accounts:
	state ag_solanago.PublicKey,
	reservePda ag_solanago.PublicKey,
	stakeList ag_solanago.PublicKey,
	validatorList ag_solanago.PublicKey,
	msolMint ag_solanago.PublicKey,
	operationalSolAccount ag_solanago.PublicKey,
	liqPoolLpMint ag_solanago.PublicKey,
	liqPoolSolLegPda ag_solanago.PublicKey,
	liqPoolMsolLeg ag_solanago.PublicKey,
	treasuryMsolAccount ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetData(data).
		SetStateAccount(state).
		SetReservePdaAccount(reservePda).
		SetStakeListAccount(stakeList).
		SetValidatorListAccount(validatorList).
		SetMsolMintAccount(msolMint).
		SetOperationalSolAccountAccount(operationalSolAccount).
		SetLiqPoolAccountsFromBuilder(
			NewInitializeLiqPoolAccountsBuilder().
				SetLpMintAccount(liqPoolLpMint).
				SetSolLegPdaAccount(liqPoolSolLegPda).
				SetMsolLegAccount(liqPoolMsolLeg),
		).
		SetTreasuryMsolAccountAccount(treasuryMsolAccount).
		SetClockAccount(clock).
		SetRentAccount(rent)
}
