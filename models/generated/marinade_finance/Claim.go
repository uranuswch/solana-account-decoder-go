// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim is the `claim` instruction.
type Claim struct {

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] reservePda
	//
	// [2] = [WRITE] ticketAccount
	//
	// [3] = [WRITE] transferSolTo
	//
	// [4] = [] clock
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimInstructionBuilder creates a new `Claim` instruction builder.
func NewClaimInstructionBuilder() *Claim {
	nd := &Claim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *Claim) SetStateAccount(state ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Claim) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReservePdaAccount sets the "reservePda" account.
func (inst *Claim) SetReservePdaAccount(reservePda ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(reservePda).WRITE()
	return inst
}

// GetReservePdaAccount gets the "reservePda" account.
func (inst *Claim) GetReservePdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTicketAccountAccount sets the "ticketAccount" account.
func (inst *Claim) SetTicketAccountAccount(ticketAccount ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ticketAccount).WRITE()
	return inst
}

// GetTicketAccountAccount gets the "ticketAccount" account.
func (inst *Claim) GetTicketAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTransferSolToAccount sets the "transferSolTo" account.
func (inst *Claim) SetTransferSolToAccount(transferSolTo ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(transferSolTo).WRITE()
	return inst
}

// GetTransferSolToAccount gets the "transferSolTo" account.
func (inst *Claim) GetTransferSolToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetClockAccount sets the "clock" account.
func (inst *Claim) SetClockAccount(clock ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *Claim) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Claim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Claim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst Claim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Claim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Claim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Claim) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ReservePda is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TicketAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TransferSolTo is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Claim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Claim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   reservePda", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       ticket", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("transferSolTo", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        clock", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj Claim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Claim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewClaimInstruction(
	// Accounts:
	state ag_solanago.PublicKey,
	reservePda ag_solanago.PublicKey,
	ticketAccount ag_solanago.PublicKey,
	transferSolTo ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Claim {
	return NewClaimInstructionBuilder().
		SetStateAccount(state).
		SetReservePdaAccount(reservePda).
		SetTicketAccountAccount(ticketAccount).
		SetTransferSolToAccount(transferSolTo).
		SetClockAccount(clock).
		SetSystemProgramAccount(systemProgram)
}
