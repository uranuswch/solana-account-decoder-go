// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EmergencyUnstake is the `emergencyUnstake` instruction.
type EmergencyUnstake struct {
	StakeIndex     *uint32
	ValidatorIndex *uint32

	// [0] = [WRITE] state
	//
	// [1] = [SIGNER] validatorManagerAuthority
	//
	// [2] = [WRITE] validatorList
	//
	// [3] = [WRITE] stakeList
	//
	// [4] = [WRITE] stakeAccount
	//
	// [5] = [] stakeDepositAuthority
	//
	// [6] = [] clock
	//
	// [7] = [] stakeProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEmergencyUnstakeInstructionBuilder creates a new `EmergencyUnstake` instruction builder.
func NewEmergencyUnstakeInstructionBuilder() *EmergencyUnstake {
	nd := &EmergencyUnstake{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetStakeIndex sets the "stakeIndex" parameter.
func (inst *EmergencyUnstake) SetStakeIndex(stakeIndex uint32) *EmergencyUnstake {
	inst.StakeIndex = &stakeIndex
	return inst
}

// SetValidatorIndex sets the "validatorIndex" parameter.
func (inst *EmergencyUnstake) SetValidatorIndex(validatorIndex uint32) *EmergencyUnstake {
	inst.ValidatorIndex = &validatorIndex
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *EmergencyUnstake) SetStateAccount(state ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *EmergencyUnstake) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetValidatorManagerAuthorityAccount sets the "validatorManagerAuthority" account.
func (inst *EmergencyUnstake) SetValidatorManagerAuthorityAccount(validatorManagerAuthority ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(validatorManagerAuthority).SIGNER()
	return inst
}

// GetValidatorManagerAuthorityAccount gets the "validatorManagerAuthority" account.
func (inst *EmergencyUnstake) GetValidatorManagerAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetValidatorListAccount sets the "validatorList" account.
func (inst *EmergencyUnstake) SetValidatorListAccount(validatorList ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(validatorList).WRITE()
	return inst
}

// GetValidatorListAccount gets the "validatorList" account.
func (inst *EmergencyUnstake) GetValidatorListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStakeListAccount sets the "stakeList" account.
func (inst *EmergencyUnstake) SetStakeListAccount(stakeList ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stakeList).WRITE()
	return inst
}

// GetStakeListAccount gets the "stakeList" account.
func (inst *EmergencyUnstake) GetStakeListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetStakeAccountAccount sets the "stakeAccount" account.
func (inst *EmergencyUnstake) SetStakeAccountAccount(stakeAccount ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(stakeAccount).WRITE()
	return inst
}

// GetStakeAccountAccount gets the "stakeAccount" account.
func (inst *EmergencyUnstake) GetStakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStakeDepositAuthorityAccount sets the "stakeDepositAuthority" account.
func (inst *EmergencyUnstake) SetStakeDepositAuthorityAccount(stakeDepositAuthority ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stakeDepositAuthority)
	return inst
}

// GetStakeDepositAuthorityAccount gets the "stakeDepositAuthority" account.
func (inst *EmergencyUnstake) GetStakeDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetClockAccount sets the "clock" account.
func (inst *EmergencyUnstake) SetClockAccount(clock ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *EmergencyUnstake) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetStakeProgramAccount sets the "stakeProgram" account.
func (inst *EmergencyUnstake) SetStakeProgramAccount(stakeProgram ag_solanago.PublicKey) *EmergencyUnstake {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(stakeProgram)
	return inst
}

// GetStakeProgramAccount gets the "stakeProgram" account.
func (inst *EmergencyUnstake) GetStakeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst EmergencyUnstake) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EmergencyUnstake,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EmergencyUnstake) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EmergencyUnstake) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.StakeIndex == nil {
			return errors.New("StakeIndex parameter is not set")
		}
		if inst.ValidatorIndex == nil {
			return errors.New("ValidatorIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ValidatorManagerAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ValidatorList is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StakeList is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.StakeAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StakeDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.StakeProgram is not set")
		}
	}
	return nil
}

func (inst *EmergencyUnstake) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EmergencyUnstake")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    StakeIndex", *inst.StakeIndex))
						paramsBranch.Child(ag_format.Param("ValidatorIndex", *inst.ValidatorIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("validatorManagerAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            validatorList", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                stakeList", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    stake", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    stakeDepositAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                    clock", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             stakeProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj EmergencyUnstake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StakeIndex` param:
	err = encoder.Encode(obj.StakeIndex)
	if err != nil {
		return err
	}
	// Serialize `ValidatorIndex` param:
	err = encoder.Encode(obj.ValidatorIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *EmergencyUnstake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StakeIndex`:
	err = decoder.Decode(&obj.StakeIndex)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorIndex`:
	err = decoder.Decode(&obj.ValidatorIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewEmergencyUnstakeInstruction declares a new EmergencyUnstake instruction with the provided parameters and accounts.
func NewEmergencyUnstakeInstruction(
	// Parameters:
	stakeIndex uint32,
	validatorIndex uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	validatorManagerAuthority ag_solanago.PublicKey,
	validatorList ag_solanago.PublicKey,
	stakeList ag_solanago.PublicKey,
	stakeAccount ag_solanago.PublicKey,
	stakeDepositAuthority ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	stakeProgram ag_solanago.PublicKey) *EmergencyUnstake {
	return NewEmergencyUnstakeInstructionBuilder().
		SetStakeIndex(stakeIndex).
		SetValidatorIndex(validatorIndex).
		SetStateAccount(state).
		SetValidatorManagerAuthorityAccount(validatorManagerAuthority).
		SetValidatorListAccount(validatorList).
		SetStakeListAccount(stakeList).
		SetStakeAccountAccount(stakeAccount).
		SetStakeDepositAuthorityAccount(stakeDepositAuthority).
		SetClockAccount(clock).
		SetStakeProgramAccount(stakeProgram)
}
