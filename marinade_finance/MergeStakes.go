// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MergeStakes is the `mergeStakes` instruction.
type MergeStakes struct {
	DestinationStakeIndex *uint32
	SourceStakeIndex      *uint32
	ValidatorIndex        *uint32

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] stakeList
	//
	// [2] = [WRITE] validatorList
	//
	// [3] = [WRITE] destinationStake
	//
	// [4] = [WRITE] sourceStake
	//
	// [5] = [] stakeDepositAuthority
	//
	// [6] = [] stakeWithdrawAuthority
	//
	// [7] = [WRITE] operationalSolAccount
	//
	// [8] = [] clock
	//
	// [9] = [] stakeHistory
	//
	// [10] = [] stakeProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMergeStakesInstructionBuilder creates a new `MergeStakes` instruction builder.
func NewMergeStakesInstructionBuilder() *MergeStakes {
	nd := &MergeStakes{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetDestinationStakeIndex sets the "destinationStakeIndex" parameter.
func (inst *MergeStakes) SetDestinationStakeIndex(destinationStakeIndex uint32) *MergeStakes {
	inst.DestinationStakeIndex = &destinationStakeIndex
	return inst
}

// SetSourceStakeIndex sets the "sourceStakeIndex" parameter.
func (inst *MergeStakes) SetSourceStakeIndex(sourceStakeIndex uint32) *MergeStakes {
	inst.SourceStakeIndex = &sourceStakeIndex
	return inst
}

// SetValidatorIndex sets the "validatorIndex" parameter.
func (inst *MergeStakes) SetValidatorIndex(validatorIndex uint32) *MergeStakes {
	inst.ValidatorIndex = &validatorIndex
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *MergeStakes) SetStateAccount(state ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *MergeStakes) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStakeListAccount sets the "stakeList" account.
func (inst *MergeStakes) SetStakeListAccount(stakeList ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stakeList).WRITE()
	return inst
}

// GetStakeListAccount gets the "stakeList" account.
func (inst *MergeStakes) GetStakeListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetValidatorListAccount sets the "validatorList" account.
func (inst *MergeStakes) SetValidatorListAccount(validatorList ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(validatorList).WRITE()
	return inst
}

// GetValidatorListAccount gets the "validatorList" account.
func (inst *MergeStakes) GetValidatorListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDestinationStakeAccount sets the "destinationStake" account.
func (inst *MergeStakes) SetDestinationStakeAccount(destinationStake ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(destinationStake).WRITE()
	return inst
}

// GetDestinationStakeAccount gets the "destinationStake" account.
func (inst *MergeStakes) GetDestinationStakeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSourceStakeAccount sets the "sourceStake" account.
func (inst *MergeStakes) SetSourceStakeAccount(sourceStake ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sourceStake).WRITE()
	return inst
}

// GetSourceStakeAccount gets the "sourceStake" account.
func (inst *MergeStakes) GetSourceStakeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStakeDepositAuthorityAccount sets the "stakeDepositAuthority" account.
func (inst *MergeStakes) SetStakeDepositAuthorityAccount(stakeDepositAuthority ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stakeDepositAuthority)
	return inst
}

// GetStakeDepositAuthorityAccount gets the "stakeDepositAuthority" account.
func (inst *MergeStakes) GetStakeDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetStakeWithdrawAuthorityAccount sets the "stakeWithdrawAuthority" account.
func (inst *MergeStakes) SetStakeWithdrawAuthorityAccount(stakeWithdrawAuthority ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(stakeWithdrawAuthority)
	return inst
}

// GetStakeWithdrawAuthorityAccount gets the "stakeWithdrawAuthority" account.
func (inst *MergeStakes) GetStakeWithdrawAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOperationalSolAccountAccount sets the "operationalSolAccount" account.
func (inst *MergeStakes) SetOperationalSolAccountAccount(operationalSolAccount ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(operationalSolAccount).WRITE()
	return inst
}

// GetOperationalSolAccountAccount gets the "operationalSolAccount" account.
func (inst *MergeStakes) GetOperationalSolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetClockAccount sets the "clock" account.
func (inst *MergeStakes) SetClockAccount(clock ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *MergeStakes) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetStakeHistoryAccount sets the "stakeHistory" account.
func (inst *MergeStakes) SetStakeHistoryAccount(stakeHistory ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(stakeHistory)
	return inst
}

// GetStakeHistoryAccount gets the "stakeHistory" account.
func (inst *MergeStakes) GetStakeHistoryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetStakeProgramAccount sets the "stakeProgram" account.
func (inst *MergeStakes) SetStakeProgramAccount(stakeProgram ag_solanago.PublicKey) *MergeStakes {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(stakeProgram)
	return inst
}

// GetStakeProgramAccount gets the "stakeProgram" account.
func (inst *MergeStakes) GetStakeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst MergeStakes) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MergeStakes,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MergeStakes) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MergeStakes) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DestinationStakeIndex == nil {
			return errors.New("DestinationStakeIndex parameter is not set")
		}
		if inst.SourceStakeIndex == nil {
			return errors.New("SourceStakeIndex parameter is not set")
		}
		if inst.ValidatorIndex == nil {
			return errors.New("ValidatorIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StakeList is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ValidatorList is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.DestinationStake is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SourceStake is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StakeDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.StakeWithdrawAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OperationalSolAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.StakeHistory is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.StakeProgram is not set")
		}
	}
	return nil
}

func (inst *MergeStakes) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MergeStakes")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("DestinationStakeIndex", *inst.DestinationStakeIndex))
						paramsBranch.Child(ag_format.Param("     SourceStakeIndex", *inst.SourceStakeIndex))
						paramsBranch.Child(ag_format.Param("       ValidatorIndex", *inst.ValidatorIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             stakeList", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         validatorList", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      destinationStake", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           sourceStake", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" stakeDepositAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("stakeWithdrawAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        operationalSol", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 clock", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          stakeHistory", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          stakeProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj MergeStakes) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestinationStakeIndex` param:
	err = encoder.Encode(obj.DestinationStakeIndex)
	if err != nil {
		return err
	}
	// Serialize `SourceStakeIndex` param:
	err = encoder.Encode(obj.SourceStakeIndex)
	if err != nil {
		return err
	}
	// Serialize `ValidatorIndex` param:
	err = encoder.Encode(obj.ValidatorIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MergeStakes) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestinationStakeIndex`:
	err = decoder.Decode(&obj.DestinationStakeIndex)
	if err != nil {
		return err
	}
	// Deserialize `SourceStakeIndex`:
	err = decoder.Decode(&obj.SourceStakeIndex)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorIndex`:
	err = decoder.Decode(&obj.ValidatorIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewMergeStakesInstruction declares a new MergeStakes instruction with the provided parameters and accounts.
func NewMergeStakesInstruction(
	// Parameters:
	destinationStakeIndex uint32,
	sourceStakeIndex uint32,
	validatorIndex uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	stakeList ag_solanago.PublicKey,
	validatorList ag_solanago.PublicKey,
	destinationStake ag_solanago.PublicKey,
	sourceStake ag_solanago.PublicKey,
	stakeDepositAuthority ag_solanago.PublicKey,
	stakeWithdrawAuthority ag_solanago.PublicKey,
	operationalSolAccount ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	stakeHistory ag_solanago.PublicKey,
	stakeProgram ag_solanago.PublicKey) *MergeStakes {
	return NewMergeStakesInstructionBuilder().
		SetDestinationStakeIndex(destinationStakeIndex).
		SetSourceStakeIndex(sourceStakeIndex).
		SetValidatorIndex(validatorIndex).
		SetStateAccount(state).
		SetStakeListAccount(stakeList).
		SetValidatorListAccount(validatorList).
		SetDestinationStakeAccount(destinationStake).
		SetSourceStakeAccount(sourceStake).
		SetStakeDepositAuthorityAccount(stakeDepositAuthority).
		SetStakeWithdrawAuthorityAccount(stakeWithdrawAuthority).
		SetOperationalSolAccountAccount(operationalSolAccount).
		SetClockAccount(clock).
		SetStakeHistoryAccount(stakeHistory).
		SetStakeProgramAccount(stakeProgram)
}
