// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeactivateStake is the `deactivateStake` instruction.
type DeactivateStake struct {
	StakeIndex     *uint32
	ValidatorIndex *uint32

	// [0] = [WRITE] state
	//
	// [1] = [] reservePda
	//
	// [2] = [WRITE] validatorList
	//
	// [3] = [WRITE] stakeList
	//
	// [4] = [WRITE] stakeAccount
	//
	// [5] = [] stakeDepositAuthority
	//
	// [6] = [WRITE, SIGNER] splitStakeAccount
	//
	// [7] = [WRITE, SIGNER] splitStakeRentPayer
	//
	// [8] = [] clock
	//
	// [9] = [] rent
	//
	// [10] = [] epochSchedule
	//
	// [11] = [] stakeHistory
	//
	// [12] = [] systemProgram
	//
	// [13] = [] stakeProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeactivateStakeInstructionBuilder creates a new `DeactivateStake` instruction builder.
func NewDeactivateStakeInstructionBuilder() *DeactivateStake {
	nd := &DeactivateStake{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetStakeIndex sets the "stakeIndex" parameter.
func (inst *DeactivateStake) SetStakeIndex(stakeIndex uint32) *DeactivateStake {
	inst.StakeIndex = &stakeIndex
	return inst
}

// SetValidatorIndex sets the "validatorIndex" parameter.
func (inst *DeactivateStake) SetValidatorIndex(validatorIndex uint32) *DeactivateStake {
	inst.ValidatorIndex = &validatorIndex
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *DeactivateStake) SetStateAccount(state ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *DeactivateStake) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReservePdaAccount sets the "reservePda" account.
func (inst *DeactivateStake) SetReservePdaAccount(reservePda ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(reservePda)
	return inst
}

// GetReservePdaAccount gets the "reservePda" account.
func (inst *DeactivateStake) GetReservePdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetValidatorListAccount sets the "validatorList" account.
func (inst *DeactivateStake) SetValidatorListAccount(validatorList ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(validatorList).WRITE()
	return inst
}

// GetValidatorListAccount gets the "validatorList" account.
func (inst *DeactivateStake) GetValidatorListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStakeListAccount sets the "stakeList" account.
func (inst *DeactivateStake) SetStakeListAccount(stakeList ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stakeList).WRITE()
	return inst
}

// GetStakeListAccount gets the "stakeList" account.
func (inst *DeactivateStake) GetStakeListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetStakeAccountAccount sets the "stakeAccount" account.
func (inst *DeactivateStake) SetStakeAccountAccount(stakeAccount ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(stakeAccount).WRITE()
	return inst
}

// GetStakeAccountAccount gets the "stakeAccount" account.
func (inst *DeactivateStake) GetStakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStakeDepositAuthorityAccount sets the "stakeDepositAuthority" account.
func (inst *DeactivateStake) SetStakeDepositAuthorityAccount(stakeDepositAuthority ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stakeDepositAuthority)
	return inst
}

// GetStakeDepositAuthorityAccount gets the "stakeDepositAuthority" account.
func (inst *DeactivateStake) GetStakeDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSplitStakeAccountAccount sets the "splitStakeAccount" account.
func (inst *DeactivateStake) SetSplitStakeAccountAccount(splitStakeAccount ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(splitStakeAccount).WRITE().SIGNER()
	return inst
}

// GetSplitStakeAccountAccount gets the "splitStakeAccount" account.
func (inst *DeactivateStake) GetSplitStakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSplitStakeRentPayerAccount sets the "splitStakeRentPayer" account.
func (inst *DeactivateStake) SetSplitStakeRentPayerAccount(splitStakeRentPayer ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(splitStakeRentPayer).WRITE().SIGNER()
	return inst
}

// GetSplitStakeRentPayerAccount gets the "splitStakeRentPayer" account.
func (inst *DeactivateStake) GetSplitStakeRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetClockAccount sets the "clock" account.
func (inst *DeactivateStake) SetClockAccount(clock ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *DeactivateStake) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *DeactivateStake) SetRentAccount(rent ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *DeactivateStake) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetEpochScheduleAccount sets the "epochSchedule" account.
func (inst *DeactivateStake) SetEpochScheduleAccount(epochSchedule ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(epochSchedule)
	return inst
}

// GetEpochScheduleAccount gets the "epochSchedule" account.
func (inst *DeactivateStake) GetEpochScheduleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetStakeHistoryAccount sets the "stakeHistory" account.
func (inst *DeactivateStake) SetStakeHistoryAccount(stakeHistory ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(stakeHistory)
	return inst
}

// GetStakeHistoryAccount gets the "stakeHistory" account.
func (inst *DeactivateStake) GetStakeHistoryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *DeactivateStake) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *DeactivateStake) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetStakeProgramAccount sets the "stakeProgram" account.
func (inst *DeactivateStake) SetStakeProgramAccount(stakeProgram ag_solanago.PublicKey) *DeactivateStake {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(stakeProgram)
	return inst
}

// GetStakeProgramAccount gets the "stakeProgram" account.
func (inst *DeactivateStake) GetStakeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst DeactivateStake) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeactivateStake,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeactivateStake) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeactivateStake) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.StakeIndex == nil {
			return errors.New("StakeIndex parameter is not set")
		}
		if inst.ValidatorIndex == nil {
			return errors.New("ValidatorIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ReservePda is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ValidatorList is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StakeList is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.StakeAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StakeDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SplitStakeAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SplitStakeRentPayer is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.EpochSchedule is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.StakeHistory is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.StakeProgram is not set")
		}
	}
	return nil
}

func (inst *DeactivateStake) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeactivateStake")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    StakeIndex", *inst.StakeIndex))
						paramsBranch.Child(ag_format.Param("ValidatorIndex", *inst.ValidatorIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           reservePda", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        validatorList", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            stakeList", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                stake", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("stakeDepositAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           splitStake", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  splitStakeRentPayer", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                clock", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                 rent", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("        epochSchedule", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         stakeHistory", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        systemProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("         stakeProgram", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj DeactivateStake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StakeIndex` param:
	err = encoder.Encode(obj.StakeIndex)
	if err != nil {
		return err
	}
	// Serialize `ValidatorIndex` param:
	err = encoder.Encode(obj.ValidatorIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DeactivateStake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StakeIndex`:
	err = decoder.Decode(&obj.StakeIndex)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorIndex`:
	err = decoder.Decode(&obj.ValidatorIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewDeactivateStakeInstruction declares a new DeactivateStake instruction with the provided parameters and accounts.
func NewDeactivateStakeInstruction(
	// Parameters:
	stakeIndex uint32,
	validatorIndex uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	reservePda ag_solanago.PublicKey,
	validatorList ag_solanago.PublicKey,
	stakeList ag_solanago.PublicKey,
	stakeAccount ag_solanago.PublicKey,
	stakeDepositAuthority ag_solanago.PublicKey,
	splitStakeAccount ag_solanago.PublicKey,
	splitStakeRentPayer ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	epochSchedule ag_solanago.PublicKey,
	stakeHistory ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	stakeProgram ag_solanago.PublicKey) *DeactivateStake {
	return NewDeactivateStakeInstructionBuilder().
		SetStakeIndex(stakeIndex).
		SetValidatorIndex(validatorIndex).
		SetStateAccount(state).
		SetReservePdaAccount(reservePda).
		SetValidatorListAccount(validatorList).
		SetStakeListAccount(stakeList).
		SetStakeAccountAccount(stakeAccount).
		SetStakeDepositAuthorityAccount(stakeDepositAuthority).
		SetSplitStakeAccountAccount(splitStakeAccount).
		SetSplitStakeRentPayerAccount(splitStakeRentPayer).
		SetClockAccount(clock).
		SetRentAccount(rent).
		SetEpochScheduleAccount(epochSchedule).
		SetStakeHistoryAccount(stakeHistory).
		SetSystemProgramAccount(systemProgram).
		SetStakeProgramAccount(stakeProgram)
}
