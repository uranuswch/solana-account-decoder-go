// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type TicketAccountData struct {
	StateAddress   ag_solanago.PublicKey
	Beneficiary    ag_solanago.PublicKey
	LamportsAmount uint64
	CreatedEpoch   uint64
}

var TicketAccountDataDiscriminator = [8]byte{133, 77, 18, 98, 211, 1, 231, 3}

func (obj TicketAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TicketAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StateAddress` param:
	err = encoder.Encode(obj.StateAddress)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `LamportsAmount` param:
	err = encoder.Encode(obj.LamportsAmount)
	if err != nil {
		return err
	}
	// Serialize `CreatedEpoch` param:
	err = encoder.Encode(obj.CreatedEpoch)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TicketAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TicketAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[133 77 18 98 211 1 231 3]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StateAddress`:
	err = decoder.Decode(&obj.StateAddress)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `LamportsAmount`:
	err = decoder.Decode(&obj.LamportsAmount)
	if err != nil {
		return err
	}
	// Deserialize `CreatedEpoch`:
	err = decoder.Decode(&obj.CreatedEpoch)
	if err != nil {
		return err
	}
	return nil
}

type State struct {
	MsolMint                  ag_solanago.PublicKey
	AdminAuthority            ag_solanago.PublicKey
	OperationalSolAccount     ag_solanago.PublicKey
	TreasuryMsolAccount       ag_solanago.PublicKey
	ReserveBumpSeed           uint8
	MsolMintAuthorityBumpSeed uint8
	RentExemptForTokenAcc     uint64
	RewardFee                 Fee
	StakeSystem               StakeSystem
	ValidatorSystem           ValidatorSystem
	LiqPool                   LiqPool
	AvailableReserveBalance   uint64
	MsolSupply                uint64
	MsolPrice                 uint64

	// count tickets for delayed-unstake
	CirculatingTicketCount uint64

	// total lamports amount of generated and not claimed yet tickets
	CirculatingTicketBalance uint64
	LentFromReserve          uint64
	MinDeposit               uint64
	MinWithdraw              uint64
	StakingSolCap            uint64
	EmergencyCoolingDown     uint64

	// emergency pause
	PauseAuthority              ag_solanago.PublicKey
	Paused                      bool
	DelayedUnstakeFee           FeeCents
	WithdrawStakeAccountFee     FeeCents
	WithdrawStakeAccountEnabled bool
	LastStakeMoveEpoch          uint64
	StakeMoved                  uint64
	MaxStakeMovedPerEpoch       Fee
}

var StateDiscriminator = [8]byte{216, 146, 107, 94, 104, 75, 182, 177}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `MsolMint` param:
	err = encoder.Encode(obj.MsolMint)
	if err != nil {
		return err
	}
	// Serialize `AdminAuthority` param:
	err = encoder.Encode(obj.AdminAuthority)
	if err != nil {
		return err
	}
	// Serialize `OperationalSolAccount` param:
	err = encoder.Encode(obj.OperationalSolAccount)
	if err != nil {
		return err
	}
	// Serialize `TreasuryMsolAccount` param:
	err = encoder.Encode(obj.TreasuryMsolAccount)
	if err != nil {
		return err
	}
	// Serialize `ReserveBumpSeed` param:
	err = encoder.Encode(obj.ReserveBumpSeed)
	if err != nil {
		return err
	}
	// Serialize `MsolMintAuthorityBumpSeed` param:
	err = encoder.Encode(obj.MsolMintAuthorityBumpSeed)
	if err != nil {
		return err
	}
	// Serialize `RentExemptForTokenAcc` param:
	err = encoder.Encode(obj.RentExemptForTokenAcc)
	if err != nil {
		return err
	}
	// Serialize `RewardFee` param:
	err = encoder.Encode(obj.RewardFee)
	if err != nil {
		return err
	}
	// Serialize `StakeSystem` param:
	err = encoder.Encode(obj.StakeSystem)
	if err != nil {
		return err
	}
	// Serialize `ValidatorSystem` param:
	err = encoder.Encode(obj.ValidatorSystem)
	if err != nil {
		return err
	}
	// Serialize `LiqPool` param:
	err = encoder.Encode(obj.LiqPool)
	if err != nil {
		return err
	}
	// Serialize `AvailableReserveBalance` param:
	err = encoder.Encode(obj.AvailableReserveBalance)
	if err != nil {
		return err
	}
	// Serialize `MsolSupply` param:
	err = encoder.Encode(obj.MsolSupply)
	if err != nil {
		return err
	}
	// Serialize `MsolPrice` param:
	err = encoder.Encode(obj.MsolPrice)
	if err != nil {
		return err
	}
	// Serialize `CirculatingTicketCount` param:
	err = encoder.Encode(obj.CirculatingTicketCount)
	if err != nil {
		return err
	}
	// Serialize `CirculatingTicketBalance` param:
	err = encoder.Encode(obj.CirculatingTicketBalance)
	if err != nil {
		return err
	}
	// Serialize `LentFromReserve` param:
	err = encoder.Encode(obj.LentFromReserve)
	if err != nil {
		return err
	}
	// Serialize `MinDeposit` param:
	err = encoder.Encode(obj.MinDeposit)
	if err != nil {
		return err
	}
	// Serialize `MinWithdraw` param:
	err = encoder.Encode(obj.MinWithdraw)
	if err != nil {
		return err
	}
	// Serialize `StakingSolCap` param:
	err = encoder.Encode(obj.StakingSolCap)
	if err != nil {
		return err
	}
	// Serialize `EmergencyCoolingDown` param:
	err = encoder.Encode(obj.EmergencyCoolingDown)
	if err != nil {
		return err
	}
	// Serialize `PauseAuthority` param:
	err = encoder.Encode(obj.PauseAuthority)
	if err != nil {
		return err
	}
	// Serialize `Paused` param:
	err = encoder.Encode(obj.Paused)
	if err != nil {
		return err
	}
	// Serialize `DelayedUnstakeFee` param:
	err = encoder.Encode(obj.DelayedUnstakeFee)
	if err != nil {
		return err
	}
	// Serialize `WithdrawStakeAccountFee` param:
	err = encoder.Encode(obj.WithdrawStakeAccountFee)
	if err != nil {
		return err
	}
	// Serialize `WithdrawStakeAccountEnabled` param:
	err = encoder.Encode(obj.WithdrawStakeAccountEnabled)
	if err != nil {
		return err
	}
	// Serialize `LastStakeMoveEpoch` param:
	err = encoder.Encode(obj.LastStakeMoveEpoch)
	if err != nil {
		return err
	}
	// Serialize `StakeMoved` param:
	err = encoder.Encode(obj.StakeMoved)
	if err != nil {
		return err
	}
	// Serialize `MaxStakeMovedPerEpoch` param:
	err = encoder.Encode(obj.MaxStakeMovedPerEpoch)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 146 107 94 104 75 182 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `MsolMint`:
	err = decoder.Decode(&obj.MsolMint)
	if err != nil {
		return err
	}
	// Deserialize `AdminAuthority`:
	err = decoder.Decode(&obj.AdminAuthority)
	if err != nil {
		return err
	}
	// Deserialize `OperationalSolAccount`:
	err = decoder.Decode(&obj.OperationalSolAccount)
	if err != nil {
		return err
	}
	// Deserialize `TreasuryMsolAccount`:
	err = decoder.Decode(&obj.TreasuryMsolAccount)
	if err != nil {
		return err
	}
	// Deserialize `ReserveBumpSeed`:
	err = decoder.Decode(&obj.ReserveBumpSeed)
	if err != nil {
		return err
	}
	// Deserialize `MsolMintAuthorityBumpSeed`:
	err = decoder.Decode(&obj.MsolMintAuthorityBumpSeed)
	if err != nil {
		return err
	}
	// Deserialize `RentExemptForTokenAcc`:
	err = decoder.Decode(&obj.RentExemptForTokenAcc)
	if err != nil {
		return err
	}
	// Deserialize `RewardFee`:
	err = decoder.Decode(&obj.RewardFee)
	if err != nil {
		return err
	}
	// Deserialize `StakeSystem`:
	err = decoder.Decode(&obj.StakeSystem)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorSystem`:
	err = decoder.Decode(&obj.ValidatorSystem)
	if err != nil {
		return err
	}
	// Deserialize `LiqPool`:
	err = decoder.Decode(&obj.LiqPool)
	if err != nil {
		return err
	}
	// Deserialize `AvailableReserveBalance`:
	err = decoder.Decode(&obj.AvailableReserveBalance)
	if err != nil {
		return err
	}
	// Deserialize `MsolSupply`:
	err = decoder.Decode(&obj.MsolSupply)
	if err != nil {
		return err
	}
	// Deserialize `MsolPrice`:
	err = decoder.Decode(&obj.MsolPrice)
	if err != nil {
		return err
	}
	// Deserialize `CirculatingTicketCount`:
	err = decoder.Decode(&obj.CirculatingTicketCount)
	if err != nil {
		return err
	}
	// Deserialize `CirculatingTicketBalance`:
	err = decoder.Decode(&obj.CirculatingTicketBalance)
	if err != nil {
		return err
	}
	// Deserialize `LentFromReserve`:
	err = decoder.Decode(&obj.LentFromReserve)
	if err != nil {
		return err
	}
	// Deserialize `MinDeposit`:
	err = decoder.Decode(&obj.MinDeposit)
	if err != nil {
		return err
	}
	// Deserialize `MinWithdraw`:
	err = decoder.Decode(&obj.MinWithdraw)
	if err != nil {
		return err
	}
	// Deserialize `StakingSolCap`:
	err = decoder.Decode(&obj.StakingSolCap)
	if err != nil {
		return err
	}
	// Deserialize `EmergencyCoolingDown`:
	err = decoder.Decode(&obj.EmergencyCoolingDown)
	if err != nil {
		return err
	}
	// Deserialize `PauseAuthority`:
	err = decoder.Decode(&obj.PauseAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Paused`:
	err = decoder.Decode(&obj.Paused)
	if err != nil {
		return err
	}
	// Deserialize `DelayedUnstakeFee`:
	err = decoder.Decode(&obj.DelayedUnstakeFee)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawStakeAccountFee`:
	err = decoder.Decode(&obj.WithdrawStakeAccountFee)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawStakeAccountEnabled`:
	err = decoder.Decode(&obj.WithdrawStakeAccountEnabled)
	if err != nil {
		return err
	}
	// Deserialize `LastStakeMoveEpoch`:
	err = decoder.Decode(&obj.LastStakeMoveEpoch)
	if err != nil {
		return err
	}
	// Deserialize `StakeMoved`:
	err = decoder.Decode(&obj.StakeMoved)
	if err != nil {
		return err
	}
	// Deserialize `MaxStakeMovedPerEpoch`:
	err = decoder.Decode(&obj.MaxStakeMovedPerEpoch)
	if err != nil {
		return err
	}
	return nil
}
