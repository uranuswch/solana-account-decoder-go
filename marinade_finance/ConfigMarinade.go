// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfigMarinade is the `configMarinade` instruction.
type ConfigMarinade struct {
	Params *ConfigMarinadeParams

	// [0] = [WRITE] state
	//
	// [1] = [SIGNER] adminAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfigMarinadeInstructionBuilder creates a new `ConfigMarinade` instruction builder.
func NewConfigMarinadeInstructionBuilder() *ConfigMarinade {
	nd := &ConfigMarinade{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *ConfigMarinade) SetParams(params ConfigMarinadeParams) *ConfigMarinade {
	inst.Params = &params
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ConfigMarinade) SetStateAccount(state ag_solanago.PublicKey) *ConfigMarinade {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ConfigMarinade) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAuthorityAccount sets the "adminAuthority" account.
func (inst *ConfigMarinade) SetAdminAuthorityAccount(adminAuthority ag_solanago.PublicKey) *ConfigMarinade {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(adminAuthority).SIGNER()
	return inst
}

// GetAdminAuthorityAccount gets the "adminAuthority" account.
func (inst *ConfigMarinade) GetAdminAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst ConfigMarinade) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ConfigMarinade,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfigMarinade) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfigMarinade) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AdminAuthority is not set")
		}
	}
	return nil
}

func (inst *ConfigMarinade) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfigMarinade")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("adminAuthority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj ConfigMarinade) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfigMarinade) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewConfigMarinadeInstruction declares a new ConfigMarinade instruction with the provided parameters and accounts.
func NewConfigMarinadeInstruction(
	// Parameters:
	params ConfigMarinadeParams,
	// Accounts:
	state ag_solanago.PublicKey,
	adminAuthority ag_solanago.PublicKey) *ConfigMarinade {
	return NewConfigMarinadeInstructionBuilder().
		SetParams(params).
		SetStateAccount(state).
		SetAdminAuthorityAccount(adminAuthority)
}
