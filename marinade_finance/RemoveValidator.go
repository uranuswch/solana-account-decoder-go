// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RemoveValidator is the `removeValidator` instruction.
type RemoveValidator struct {
	Index         *uint32
	ValidatorVote *ag_solanago.PublicKey

	// [0] = [WRITE] state
	//
	// [1] = [SIGNER] managerAuthority
	//
	// [2] = [WRITE] validatorList
	//
	// [3] = [WRITE] duplicationFlag
	//
	// [4] = [WRITE] operationalSolAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRemoveValidatorInstructionBuilder creates a new `RemoveValidator` instruction builder.
func NewRemoveValidatorInstructionBuilder() *RemoveValidator {
	nd := &RemoveValidator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetIndex sets the "index" parameter.
func (inst *RemoveValidator) SetIndex(index uint32) *RemoveValidator {
	inst.Index = &index
	return inst
}

// SetValidatorVote sets the "validatorVote" parameter.
func (inst *RemoveValidator) SetValidatorVote(validatorVote ag_solanago.PublicKey) *RemoveValidator {
	inst.ValidatorVote = &validatorVote
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *RemoveValidator) SetStateAccount(state ag_solanago.PublicKey) *RemoveValidator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *RemoveValidator) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetManagerAuthorityAccount sets the "managerAuthority" account.
func (inst *RemoveValidator) SetManagerAuthorityAccount(managerAuthority ag_solanago.PublicKey) *RemoveValidator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(managerAuthority).SIGNER()
	return inst
}

// GetManagerAuthorityAccount gets the "managerAuthority" account.
func (inst *RemoveValidator) GetManagerAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetValidatorListAccount sets the "validatorList" account.
func (inst *RemoveValidator) SetValidatorListAccount(validatorList ag_solanago.PublicKey) *RemoveValidator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(validatorList).WRITE()
	return inst
}

// GetValidatorListAccount gets the "validatorList" account.
func (inst *RemoveValidator) GetValidatorListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDuplicationFlagAccount sets the "duplicationFlag" account.
func (inst *RemoveValidator) SetDuplicationFlagAccount(duplicationFlag ag_solanago.PublicKey) *RemoveValidator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(duplicationFlag).WRITE()
	return inst
}

// GetDuplicationFlagAccount gets the "duplicationFlag" account.
func (inst *RemoveValidator) GetDuplicationFlagAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOperationalSolAccountAccount sets the "operationalSolAccount" account.
func (inst *RemoveValidator) SetOperationalSolAccountAccount(operationalSolAccount ag_solanago.PublicKey) *RemoveValidator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(operationalSolAccount).WRITE()
	return inst
}

// GetOperationalSolAccountAccount gets the "operationalSolAccount" account.
func (inst *RemoveValidator) GetOperationalSolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst RemoveValidator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RemoveValidator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RemoveValidator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RemoveValidator) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Index == nil {
			return errors.New("Index parameter is not set")
		}
		if inst.ValidatorVote == nil {
			return errors.New("ValidatorVote parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ManagerAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ValidatorList is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.DuplicationFlag is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OperationalSolAccount is not set")
		}
	}
	return nil
}

func (inst *RemoveValidator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RemoveValidator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Index", *inst.Index))
						paramsBranch.Child(ag_format.Param("ValidatorVote", *inst.ValidatorVote))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("managerAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   validatorList", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" duplicationFlag", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  operationalSol", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj RemoveValidator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `ValidatorVote` param:
	err = encoder.Encode(obj.ValidatorVote)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RemoveValidator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorVote`:
	err = decoder.Decode(&obj.ValidatorVote)
	if err != nil {
		return err
	}
	return nil
}

// NewRemoveValidatorInstruction declares a new RemoveValidator instruction with the provided parameters and accounts.
func NewRemoveValidatorInstruction(
	// Parameters:
	index uint32,
	validatorVote ag_solanago.PublicKey,
	// Accounts:
	state ag_solanago.PublicKey,
	managerAuthority ag_solanago.PublicKey,
	validatorList ag_solanago.PublicKey,
	duplicationFlag ag_solanago.PublicKey,
	operationalSolAccount ag_solanago.PublicKey) *RemoveValidator {
	return NewRemoveValidatorInstructionBuilder().
		SetIndex(index).
		SetValidatorVote(validatorVote).
		SetStateAccount(state).
		SetManagerAuthorityAccount(managerAuthority).
		SetValidatorListAccount(validatorList).
		SetDuplicationFlagAccount(duplicationFlag).
		SetOperationalSolAccountAccount(operationalSolAccount)
}
