// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddLiquidity is the `addLiquidity` instruction.
type AddLiquidity struct {
	Lamports *uint64

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] lpMint
	//
	// [2] = [] lpMintAuthority
	//
	// [3] = [] liqPoolMsolLeg
	//
	// [4] = [WRITE] liqPoolSolLegPda
	//
	// [5] = [WRITE, SIGNER] transferFrom
	//
	// [6] = [WRITE] mintTo
	//
	// [7] = [] systemProgram
	//
	// [8] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddLiquidityInstructionBuilder creates a new `AddLiquidity` instruction builder.
func NewAddLiquidityInstructionBuilder() *AddLiquidity {
	nd := &AddLiquidity{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetLamports sets the "lamports" parameter.
func (inst *AddLiquidity) SetLamports(lamports uint64) *AddLiquidity {
	inst.Lamports = &lamports
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *AddLiquidity) SetStateAccount(state ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *AddLiquidity) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLpMintAccount sets the "lpMint" account.
func (inst *AddLiquidity) SetLpMintAccount(lpMint ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lpMint" account.
func (inst *AddLiquidity) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLpMintAuthorityAccount sets the "lpMintAuthority" account.
func (inst *AddLiquidity) SetLpMintAuthorityAccount(lpMintAuthority ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(lpMintAuthority)
	return inst
}

// GetLpMintAuthorityAccount gets the "lpMintAuthority" account.
func (inst *AddLiquidity) GetLpMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLiqPoolMsolLegAccount sets the "liqPoolMsolLeg" account.
func (inst *AddLiquidity) SetLiqPoolMsolLegAccount(liqPoolMsolLeg ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(liqPoolMsolLeg)
	return inst
}

// GetLiqPoolMsolLegAccount gets the "liqPoolMsolLeg" account.
func (inst *AddLiquidity) GetLiqPoolMsolLegAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLiqPoolSolLegPdaAccount sets the "liqPoolSolLegPda" account.
func (inst *AddLiquidity) SetLiqPoolSolLegPdaAccount(liqPoolSolLegPda ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(liqPoolSolLegPda).WRITE()
	return inst
}

// GetLiqPoolSolLegPdaAccount gets the "liqPoolSolLegPda" account.
func (inst *AddLiquidity) GetLiqPoolSolLegPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTransferFromAccount sets the "transferFrom" account.
func (inst *AddLiquidity) SetTransferFromAccount(transferFrom ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(transferFrom).WRITE().SIGNER()
	return inst
}

// GetTransferFromAccount gets the "transferFrom" account.
func (inst *AddLiquidity) GetTransferFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMintToAccount sets the "mintTo" account.
func (inst *AddLiquidity) SetMintToAccount(mintTo ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mintTo).WRITE()
	return inst
}

// GetMintToAccount gets the "mintTo" account.
func (inst *AddLiquidity) GetMintToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddLiquidity) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddLiquidity) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AddLiquidity) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AddLiquidity {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AddLiquidity) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst AddLiquidity) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddLiquidity,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddLiquidity) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddLiquidity) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Lamports == nil {
			return errors.New("Lamports parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LpMintAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LiqPoolMsolLeg is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LiqPoolSolLegPda is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TransferFrom is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MintTo is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *AddLiquidity) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddLiquidity")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Lamports", *inst.Lamports))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          lpMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" lpMintAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  liqPoolMsolLeg", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("liqPoolSolLegPda", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    transferFrom", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          mintTo", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj AddLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Lamports` param:
	err = encoder.Encode(obj.Lamports)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Lamports`:
	err = decoder.Decode(&obj.Lamports)
	if err != nil {
		return err
	}
	return nil
}

// NewAddLiquidityInstruction declares a new AddLiquidity instruction with the provided parameters and accounts.
func NewAddLiquidityInstruction(
	// Parameters:
	lamports uint64,
	// Accounts:
	state ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	lpMintAuthority ag_solanago.PublicKey,
	liqPoolMsolLeg ag_solanago.PublicKey,
	liqPoolSolLegPda ag_solanago.PublicKey,
	transferFrom ag_solanago.PublicKey,
	mintTo ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *AddLiquidity {
	return NewAddLiquidityInstructionBuilder().
		SetLamports(lamports).
		SetStateAccount(state).
		SetLpMintAccount(lpMint).
		SetLpMintAuthorityAccount(lpMintAuthority).
		SetLiqPoolMsolLegAccount(liqPoolMsolLeg).
		SetLiqPoolSolLegPdaAccount(liqPoolSolLegPda).
		SetTransferFromAccount(transferFrom).
		SetMintToAccount(mintTo).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
