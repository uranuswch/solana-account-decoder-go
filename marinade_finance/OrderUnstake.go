// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OrderUnstake is the `orderUnstake` instruction.
type OrderUnstake struct {
	MsolAmount *uint64

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] msolMint
	//
	// [2] = [WRITE] burnMsolFrom
	//
	// [3] = [SIGNER] burnMsolAuthority
	//
	// [4] = [WRITE] newTicketAccount
	//
	// [5] = [] clock
	//
	// [6] = [] rent
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOrderUnstakeInstructionBuilder creates a new `OrderUnstake` instruction builder.
func NewOrderUnstakeInstructionBuilder() *OrderUnstake {
	nd := &OrderUnstake{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetMsolAmount sets the "msolAmount" parameter.
func (inst *OrderUnstake) SetMsolAmount(msolAmount uint64) *OrderUnstake {
	inst.MsolAmount = &msolAmount
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *OrderUnstake) SetStateAccount(state ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *OrderUnstake) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMsolMintAccount sets the "msolMint" account.
func (inst *OrderUnstake) SetMsolMintAccount(msolMint ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(msolMint).WRITE()
	return inst
}

// GetMsolMintAccount gets the "msolMint" account.
func (inst *OrderUnstake) GetMsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBurnMsolFromAccount sets the "burnMsolFrom" account.
func (inst *OrderUnstake) SetBurnMsolFromAccount(burnMsolFrom ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(burnMsolFrom).WRITE()
	return inst
}

// GetBurnMsolFromAccount gets the "burnMsolFrom" account.
func (inst *OrderUnstake) GetBurnMsolFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBurnMsolAuthorityAccount sets the "burnMsolAuthority" account.
func (inst *OrderUnstake) SetBurnMsolAuthorityAccount(burnMsolAuthority ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(burnMsolAuthority).SIGNER()
	return inst
}

// GetBurnMsolAuthorityAccount gets the "burnMsolAuthority" account.
func (inst *OrderUnstake) GetBurnMsolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetNewTicketAccountAccount sets the "newTicketAccount" account.
func (inst *OrderUnstake) SetNewTicketAccountAccount(newTicketAccount ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(newTicketAccount).WRITE()
	return inst
}

// GetNewTicketAccountAccount gets the "newTicketAccount" account.
func (inst *OrderUnstake) GetNewTicketAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetClockAccount sets the "clock" account.
func (inst *OrderUnstake) SetClockAccount(clock ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *OrderUnstake) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRentAccount sets the "rent" account.
func (inst *OrderUnstake) SetRentAccount(rent ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *OrderUnstake) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *OrderUnstake) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *OrderUnstake {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *OrderUnstake) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst OrderUnstake) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OrderUnstake,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OrderUnstake) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OrderUnstake) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MsolAmount == nil {
			return errors.New("MsolAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MsolMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BurnMsolFrom is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BurnMsolAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.NewTicketAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *OrderUnstake) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OrderUnstake")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MsolAmount", *inst.MsolAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         msolMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     burnMsolFrom", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("burnMsolAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        newTicket", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            clock", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             rent", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj OrderUnstake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MsolAmount` param:
	err = encoder.Encode(obj.MsolAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OrderUnstake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MsolAmount`:
	err = decoder.Decode(&obj.MsolAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewOrderUnstakeInstruction declares a new OrderUnstake instruction with the provided parameters and accounts.
func NewOrderUnstakeInstruction(
	// Parameters:
	msolAmount uint64,
	// Accounts:
	state ag_solanago.PublicKey,
	msolMint ag_solanago.PublicKey,
	burnMsolFrom ag_solanago.PublicKey,
	burnMsolAuthority ag_solanago.PublicKey,
	newTicketAccount ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *OrderUnstake {
	return NewOrderUnstakeInstructionBuilder().
		SetMsolAmount(msolAmount).
		SetStateAccount(state).
		SetMsolMintAccount(msolMint).
		SetBurnMsolFromAccount(burnMsolFrom).
		SetBurnMsolAuthorityAccount(burnMsolAuthority).
		SetNewTicketAccountAccount(newTicketAccount).
		SetClockAccount(clock).
		SetRentAccount(rent).
		SetTokenProgramAccount(tokenProgram)
}
