// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marinade_finance

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddValidator is the `addValidator` instruction.
type AddValidator struct {
	Score *uint32

	// [0] = [WRITE] state
	//
	// [1] = [SIGNER] managerAuthority
	//
	// [2] = [WRITE] validatorList
	//
	// [3] = [] validatorVote
	//
	// [4] = [WRITE] duplicationFlag
	// ··········· by initializing this account we mark the validator as added
	//
	// [5] = [WRITE, SIGNER] rentPayer
	//
	// [6] = [] clock
	//
	// [7] = [] rent
	//
	// [8] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddValidatorInstructionBuilder creates a new `AddValidator` instruction builder.
func NewAddValidatorInstructionBuilder() *AddValidator {
	nd := &AddValidator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetScore sets the "score" parameter.
func (inst *AddValidator) SetScore(score uint32) *AddValidator {
	inst.Score = &score
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *AddValidator) SetStateAccount(state ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *AddValidator) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetManagerAuthorityAccount sets the "managerAuthority" account.
func (inst *AddValidator) SetManagerAuthorityAccount(managerAuthority ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(managerAuthority).SIGNER()
	return inst
}

// GetManagerAuthorityAccount gets the "managerAuthority" account.
func (inst *AddValidator) GetManagerAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetValidatorListAccount sets the "validatorList" account.
func (inst *AddValidator) SetValidatorListAccount(validatorList ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(validatorList).WRITE()
	return inst
}

// GetValidatorListAccount gets the "validatorList" account.
func (inst *AddValidator) GetValidatorListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetValidatorVoteAccount sets the "validatorVote" account.
func (inst *AddValidator) SetValidatorVoteAccount(validatorVote ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(validatorVote)
	return inst
}

// GetValidatorVoteAccount gets the "validatorVote" account.
func (inst *AddValidator) GetValidatorVoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDuplicationFlagAccount sets the "duplicationFlag" account.
// by initializing this account we mark the validator as added
func (inst *AddValidator) SetDuplicationFlagAccount(duplicationFlag ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(duplicationFlag).WRITE()
	return inst
}

// GetDuplicationFlagAccount gets the "duplicationFlag" account.
// by initializing this account we mark the validator as added
func (inst *AddValidator) GetDuplicationFlagAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentPayerAccount sets the "rentPayer" account.
func (inst *AddValidator) SetRentPayerAccount(rentPayer ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rentPayer).WRITE().SIGNER()
	return inst
}

// GetRentPayerAccount gets the "rentPayer" account.
func (inst *AddValidator) GetRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetClockAccount sets the "clock" account.
func (inst *AddValidator) SetClockAccount(clock ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *AddValidator) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *AddValidator) SetRentAccount(rent ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AddValidator) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddValidator) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddValidator) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst AddValidator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddValidator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddValidator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddValidator) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Score == nil {
			return errors.New("Score parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ManagerAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ValidatorList is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ValidatorVote is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DuplicationFlag is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RentPayer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddValidator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddValidator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Score", *inst.Score))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("managerAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   validatorList", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   validatorVote", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" duplicationFlag", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       rentPayer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           clock", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            rent", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj AddValidator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Score` param:
	err = encoder.Encode(obj.Score)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddValidator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Score`:
	err = decoder.Decode(&obj.Score)
	if err != nil {
		return err
	}
	return nil
}

// NewAddValidatorInstruction declares a new AddValidator instruction with the provided parameters and accounts.
func NewAddValidatorInstruction(
	// Parameters:
	score uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	managerAuthority ag_solanago.PublicKey,
	validatorList ag_solanago.PublicKey,
	validatorVote ag_solanago.PublicKey,
	duplicationFlag ag_solanago.PublicKey,
	rentPayer ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddValidator {
	return NewAddValidatorInstructionBuilder().
		SetScore(score).
		SetStateAccount(state).
		SetManagerAuthorityAccount(managerAuthority).
		SetValidatorListAccount(validatorList).
		SetValidatorVoteAccount(validatorVote).
		SetDuplicationFlagAccount(duplicationFlag).
		SetRentPayerAccount(rentPayer).
		SetClockAccount(clock).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
